<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Building Audit Tracker</title>
  <style>
    /* Inter font */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;800&display=swap');

    :root {
      --bg-dark: #0b0c10;
      --bg-card: rgba(30,30,30,0.85);
      --accent: #5CE1E6;
      --text-light: #f5f5f5;
      --text-secondary: #bbb;
      --radius: 12px;
      --transition: 0.3s ease;
      --live-red: #ff3860;
    }
    * { box-sizing: border-box; }

    body {
      margin:0; padding:0;
      font-family:'Inter',sans-serif;
      background: radial-gradient(circle at center, #111 0%, #000 100%);
      color: var(--text-light);
      overflow: hidden;
      position: relative;
    }

    /* Starfield canvas */
    #starfield {
      position: fixed; top:0; left:0;
      width:100%; height:100%;
      z-index:-1;
    }

    header, footer {
      background: rgba(0,0,0,0.8);
      text-align: center;
      padding: 20px 0;
      position: sticky; top:0; width:100%; z-index:100;
    }
    header h1 {
      margin:0;
      font-size:2.5rem;
      color: var(--accent);
      text-shadow: 0 0 8px var(--accent);
    }
    .save-btn {
      position: absolute; top:20px; right:20px;
      background: var(--accent);
      color: #000;
      border: none;
      padding: 10px 16px;
      border-radius: var(--radius);
      font-weight:600;
      cursor:pointer;
      transition: transform var(--transition);
    }
    .save-btn:hover { transform: scale(1.05); }

    .live-indicator {
      position: absolute; top:20px; left:20px;
      display: flex; align-items:center; gap:8px;
      font-size:0.9rem; font-weight:600;
    }
    .live-indicator .dot {
      width:10px; height:10px;
      background: var(--live-red);
      border-radius:50%;
      animation: blink 1s infinite;
    }
    @keyframes blink {
      0%,50%,100%{opacity:1;}25%,75%{opacity:0.2;}
    }

    .container {
      max-width:1200px;
      margin: 60px auto 120px;
      padding: 0 20px;
      height: calc(100vh - 160px);
      overflow-y: auto;
    }
    h2 {
      text-align:center;
      font-size:1.8rem;
      margin-bottom:10px;
      color: var(--text-light);
    }
    p.lead {
      text-align:center;
      margin-bottom:40px;
      color: var(--text-secondary);
    }

    .tab-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 10px;
      margin-bottom: 30px;
    }
    .tab-button {
      padding: 10px 18px;
      border: 2px solid var(--accent);
      border-radius: var(--radius);
      background: transparent;
      color: var(--text-light);
      font-weight:600;
      cursor: pointer;
      transition: background var(--transition), color var(--transition);
    }
    .tab-button.active,
    .tab-button:hover {
      background: var(--accent);
      color: #000;
    }

    .btn {
      background: var(--accent);
      color: #000;
      padding: 12px 24px;
      border: none;
      border-radius: var(--radius);
      font-weight:600;
      cursor:pointer;
      text-transform:uppercase;
      margin: 0 8px 20px;
      transition: transform var(--transition);
    }
    .btn:hover { transform: scale(1.05); }

    .inline-form {
      display: none;
      justify-content: center;
      gap: 10px;
      margin-bottom: 40px;
    }
    .inline-form input {
      padding: 10px;
      width: 180px;
      border: 1px solid #333;
      background: #222;
      color: var(--text-light);
      border-radius: var(--radius);
      transition: border-color var(--transition);
    }
    .inline-form input:focus {
      outline:none; border-color:var(--accent);
    }

    .manager-grid {
      display:grid;
      grid-template-columns: repeat(auto-fill,minmax(260px,1fr));
      gap:30px;
    }
    .manager-card {
      background: var(--bg-card);
      padding:20px;
      border-radius: var(--radius);
      box-shadow:0 8px 16px rgba(0,0,0,0.5);
      text-align:center;
      transition: transform var(--transition), box-shadow var(--transition);
    }
    .manager-card:hover {
      transform: translateY(-8px);
      box-shadow:0 12px 24px rgba(0,0,0,0.7);
    }
    .manager-card h3 {
      margin:0 0 8px;
      font-size:1.2rem;
      font-weight:600;
      color: var(--accent);
    }
    .manager-card p {
      margin:0 0 16px;
      color: var(--text-secondary);
    }

    .status {
      display:flex; gap:8px; justify-content:center; margin-bottom:16px;
    }
    .status span {
      padding:6px 14px;
      border-radius: var(--radius);
      font-size:0.85rem;
      font-weight:600;
      color:#fff;
      transition: background var(--transition);
    }
    .not-completed { background: #dc3545;}
    .partially-completed { background:#ff9800;}
    .completed { background:#28a745;}

    .ooto-button, .delete-button {
      width: calc(50% - 10px);
      margin:5px;
      padding:10px;
      border:none;
      border-radius: var(--radius);
      font-weight:600;
      color:#fff;
      cursor:pointer;
      transition: background var(--transition);
    }
    .ooto-button { background:#28a745;}
    .ooto-button:hover { background:#218838;}
    .delete-button { background:#dc3545;}
    .delete-button:hover { background:#c82333;}

    @media(max-width:600px){
      header h1{font-size:2rem;}
      .btn{width:100%;margin-bottom:15px;}
      .inline-form{flex-direction:column;}
      .inline-form input{width:100%;}
    }
  </style>
</head>
<body>
  <canvas id="starfield"></canvas>

  <header>
    <div class="live-indicator">
      <div class="dot"></div>
      <div id="liveText">LIVE --</div>
    </div>
    <h1>Building Audit Tracker</h1>
    <button id="btnSave" class="save-btn">Save Changes</button>
  </header>

  <div class="container">
    <h2>Safety Audit Tracker</h2>
    <p class="lead">Monitor AO & TPS completion across all buildings and teams.</p>

    <div class="tab-container" id="buildingTabs"></div>

    <div style="text-align:center; margin-bottom:30px;">
      <button class="btn" id="btnHome">Home</button>
      <button class="btn" id="btnAddBuilding">Add Building</button>
      <button class="btn" id="btnShowBuildings">Show All Buildings</button>
    </div>

    <form id="managerForm" class="inline-form">
      <input type="text" name="name" placeholder="Manager Name" required>
      <input type="text" name="shift" placeholder="Shift" required>
      <button class="btn" type="submit">Add Manager</button>
    </form>

    <div class="manager-grid" id="managerTabs"></div>
  </div>

  <footer><p>© 2025 Audit Tracker</p></footer>

  <script>
    // Starfield
    const canvas = document.getElementById('starfield'),
          ctx    = canvas.getContext('2d');
    let w,h,stars = [];
    function initStars(){
      w=canvas.width=window.innerWidth;
      h=canvas.height=window.innerHeight;
      stars=[];
      for(let i=0;i<200;i++){
        stars.push({x:Math.random()*w,y:Math.random()*h,r:Math.random()*1.2});
      }
    }
    function animStars(){
      ctx.clearRect(0,0,w,h);
      stars.forEach(s=>{
        ctx.beginPath();
        ctx.arc(s.x,s.y,s.r,0,2*Math.PI);
        ctx.fillStyle='#fff'; ctx.fill();
        s.x+=0.15; if(s.x>w) s.x=0;
      });
      requestAnimationFrame(animStars);
    }
    window.onresize=initStars;
    initStars(); animStars();

    // Live clock
    function updateLive(){
      const now=new Date(),
            tz=Intl.DateTimeFormat().resolvedOptions().timeZone,
            ts=now.toLocaleTimeString();
      document.getElementById('liveText').textContent = `LIVE • ${tz} • ${ts}`;
    }
    setInterval(updateLive,1000);
    updateLive();

    // — your existing logic below unchanged —

    const shiftOrder=["FHD","FHN","BHD","RT","M-F"], 
          predefinedBuildings=[
            {name:"AVP9",password:"passwordAVP9"},{name:"AZA4",password:"passwordAZA4"},
            {name:"BDL6",password:"passwordBDL6"},{name:"BFI7",password:"passwordBFI7"},
            {name:"CLT6",password:"passwordCLT6"},{name:"DEN7",password:"passwordDEN7"},
            {name:"DTW3",password:"passwordDTW3"},{name:"FTW2",password:"passwordFTW2"},
            {name:"HGR2",password:"passwordHGR2"},{name:"HOU7",password:"passwordHOU7"},
            {name:"HSV2",password:"passwordHSV2"},{name:"LGB9",password:"passwordLGB9"},
            {name:"MCI3",password:"passwordMCI3"},{name:"MDW8",password:"passwordMDW8"},
            {name:"MEM8",password:"passwordMEM8"},{name:"MQJ2",password:"passwordMQJ2"},
            {name:"MSP6",password:"passwordMSP6"},{name:"PBI2",password:"passwordPBI2"},
            {name:"PDX6",password:"passwordPDX6"},{name:"RFD4",password:"passwordRFD4"},
            {name:"SAT6",password:"passwordSAT6"},{name:"SCK3",password:"passwordSCK3"},
            {name:"SLC3",password:"passwordSLC3"},{name:"SMF7",password:"passwordSMF7"},
            {name:"STL6",password:"passwordSTL6"},{name:"TPA6",password:"passwordTPA6"},
            {name:"TTN2",password:"passwordTTN2"},{name:"YGK1",password:"passwordYGK1"},
            {name:"YYC6",password:"passwordYYC6"}
          ];

    let currentBuilding = null;

    document.addEventListener('DOMContentLoaded',()=>{
      document.getElementById('btnShowBuildings').onclick = showBuildings;
      document.getElementById('btnAddBuilding').onclick   = addBuilding;
      document.getElementById('btnHome').onclick          = goHome;
      document.getElementById('btnSave').onclick          = saveChanges;
      document.getElementById('managerForm').onsubmit     = e=>{
        e.preventDefault();
        addManager(e.target.name.value.trim(),e.target.shift.value.trim());
        e.target.reset();
      };
      showBuildings();
    });

    function showBuildings(){
      goHome();
      const tabs = document.getElementById('buildingTabs');
      tabs.innerHTML = '';
      predefinedBuildings.forEach(b=>{
        const btn = document.createElement('button');
        btn.className = 'tab-button';
        btn.textContent = b.name;
        btn.onclick = ()=>openBuilding(b);
        tabs.appendChild(btn);
      });
    }
    function addBuilding(){
      const n=prompt('New building name:'); if(!n) return;
      const p=prompt(`Set password for ${n}:`); if(!p) return;
      predefinedBuildings.push({name:n,password:p});
      showBuildings();
    }
    function openBuilding(b){
      const pwd=prompt(`Password for ${b.name}:`);
      if(pwd!==b.password){ alert('Incorrect'); return; }
      currentBuilding=b.name;
      document.querySelectorAll('.tab-button').forEach(tb=>
        tb.classList.toggle('active', tb.textContent===b.name)
      );
      document.getElementById('managerForm').style.display='flex';
      renderManagers();
    }
    function goHome(){
      currentBuilding=null;
      document.getElementById('managerForm').style.display='none';
      document.getElementById('managerTabs').innerHTML='';
      document.querySelectorAll('.tab-button').forEach(tb=>tb.classList.remove('active'));
    }
    function renderManagers(){
      const grid=document.getElementById('managerTabs');
      grid.innerHTML='';
      const list=JSON.parse(localStorage.getItem(currentBuilding)||'[]');
      list.sort((a,b)=>shiftOrder.indexOf(a.shift)-shiftOrder.indexOf(b.shift));
      list.forEach(m=>{
        const c=document.createElement('div'); c.className='manager-card';
        if(m.ooto){
          c.innerHTML= `<h3>${m.name}</h3>
                        <div class="status"><span class="completed">OOTO</span></div>
                        <button class="ooto-button">Undo OOTO</button>`;
          c.querySelector('.ooto-button').onclick = ()=>toggleOOTO(m.name);
        } else {
          c.innerHTML= `<h3>${m.name}</h3>
                        <p>Shift: ${m.shift}</p>
                        <div class="status">
                          <span class="not-completed ao-status">AO: Not Completed</span>
                          <span class="not-completed tps-status">TPS: Not Completed</span>
                        </div>
                        <button class="ooto-button">OOTO</button>
                        <button class="delete-button">Delete</button>`;
          c.querySelector('.ao-status').onclick  = e=>toggleStatus(e.target,'ao');
          c.querySelector('.tps-status').onclick = e=>toggleStatus(e.target,'tps');
          c.querySelector('.ooto-button').onclick= ()=>toggleOOTO(m.name);
          c.querySelector('.delete-button').onclick=()=>deleteManager(m.name);
        }
        grid.appendChild(c);
      });
    }
    function addManager(n,s){
      if(!currentBuilding) return alert('Select a building');
      let arr = JSON.parse(localStorage.getItem(currentBuilding)||'[]');
      if(arr.some(x=>x.name===n)) return alert('Duplicate');
      arr.push({name:n,shift:s,ooto:false,ao:'Not Completed',tps:'Not Completed'});
      localStorage.setItem(currentBuilding,JSON.stringify(arr));
      renderManagers();
    }
    function deleteManager(n){
      let arr = JSON.parse(localStorage.getItem(currentBuilding)||'[]');
      arr = arr.filter(x=>x.name!==n);
      localStorage.setItem(currentBuilding,JSON.stringify(arr));
      renderManagers();
    }
    function toggleOOTO(n){
      let arr = JSON.parse(localStorage.getItem(currentBuilding)||'[]');
      arr = arr.map(x=>x.name===n?{...x,ooto:!x.ooto}:x);
      localStorage.setItem(currentBuilding,JSON.stringify(arr));
      renderManagers();
    }
    function toggleStatus(el,t){
      const nm=el.closest('.manager-card').querySelector('h3').textContent;
      let arr = JSON.parse(localStorage.getItem(currentBuilding)||'[]');
      arr = arr.map(x=>{
        if(x.name===nm){
          if(t==='ao') x.ao = x.ao!=='Completed'?'Completed':'Not Completed';
          else x.tps = x.tps==='2/2'?'Not Completed': x.tps==='1/2'?'2/2':'1/2';
        }
        return x;
      });
      localStorage.setItem(currentBuilding,JSON.stringify(arr));
      renderManagers();
    }
    function saveChanges(){
      if(!currentBuilding) return alert('Select a building');
      let updated=[];
      document.querySelectorAll('.manager-card').forEach(c=>{
        const name = c.querySelector('h3').textContent;
        const shiftText = c.querySelector('p')?.textContent.replace('Shift: ','')||'';
        const ao = c.querySelector('.ao-status')?.textContent.replace('AO: ','')||'Not Completed';
        const tps= c.querySelector('.tps-status')?.textContent.replace('TPS: ','')||'Not Completed';
        const ooto = c.querySelector('.ooto-button')?.textContent==='Undo OOTO';
        updated.push({name,shift:shiftText,ao,tps,ooto});
      });
      localStorage.setItem(currentBuilding,JSON.stringify(updated));
      alert('Changes saved!');
    }
  </script>
</body>
</html>
